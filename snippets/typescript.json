{
  "NestJS Controller": {
    "prefix": "nestjs-controller",
    "body": [
      "import { Controller, Get } from '@nestjs/common';",
      "",
      "@Controller('$1')",
      "export class $2Controller {",
      "  @Get()",
      "  findAll(): string {",
      "    return 'This action returns all $1';",
      "  }",
      "}"
    ],
    "description": "Create a new NestJS controller"
  },
  "NestJS Service": {
    "prefix": "nestjs-service",
    "body": [
      "import { Injectable } from '@nestjs/common';",
      "",
      "@Injectable()",
      "export class $1Service {",
      "  getHello(): string {",
      "    return 'Hello World!';",
      "  }",
      "}"
    ],
    "description": "Create a new NestJS service"
  },
  "NestJS Module": {
    "prefix": "nestjs-module",
    "body": [
      "import { Module } from '@nestjs/common';",
      "import { $1Controller } from './$1.controller';",
      "import { $1Service } from './$1.service';",
      "",
      "@Module({",
      "  controllers: [$1Controller],",
      "  providers: [$1Service],",
      "})",
      "export class $1Module {}"
    ],
    "description": "Create a new NestJS module"
  },
  "NestJS Middleware": {
    "prefix": "nestjs-middleware",
    "body": [
      "import { Injectable, NestMiddleware } from '@nestjs/common';",
      "import { Request, Response, NextFunction } from 'express';",
      "",
      "@Injectable()",
      "export class $1Middleware implements NestMiddleware {",
      "  use(req: Request, res: Response, next: NextFunction) {",
      "    console.log('Request...');",
      "    next();",
      "  }",
      "}"
    ],
    "description": "Create a new NestJS middleware"
  },
  "NestJS Guard": {
    "prefix": "nestjs-guard",
    "body": [
      "import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable()",
      "export class $1Guard implements CanActivate {",
      "  canActivate(",
      "    context: ExecutionContext,",
      "  ): boolean | Promise<boolean> | Observable<boolean> {",
      "    return true;",
      "  }",
      "}"
    ],
    "description": "Create a new NestJS guard"
  },
  "NestJS Interceptor": {
    "prefix": "nestjs-interceptor",
    "body": [
      "import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';",
      "import { Observable } from 'rxjs';",
      "import { tap } from 'rxjs/operators';",
      "",
      "@Injectable()",
      "export class $1Interceptor implements NestInterceptor {",
      "  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {",
      "    console.log('Before...');",
      "    const now = Date.now();",
      "    return next",
      "      .handle()",
      "      .pipe(",
      "        tap(() => console.log(`After... ${Date.now() - now}ms`)),",
      "      );",
      "  }",
      "}"
    ],
    "description": "Create a new NestJS interceptor"
  },
  "NestJS Pipe": {
    "prefix": "nestjs-pipe",
    "body": [
      "import { Injectable, PipeTransform, ArgumentMetadata, BadRequestException } from '@nestjs/common';",
      "",
      "@Injectable()",
      "export class $1Pipe implements PipeTransform {",
      "  transform(value: any, metadata: ArgumentMetadata) {",
      "    if (!value) {",
      "      throw new BadRequestException('Validation failed');",
      "    }",
      "    return value;",
      "  }",
      "}"
    ],
    "description": "Create a new NestJS pipe"
  },
  "Nest Root Module": {
    "prefix": "nestjs-root-module",
    "description": "NestJS Root Module",
    "body": [
      "import { Module } from '@nestjs/common';",
      "",
      "@Module({",
      "\tmodules: [${1}Module],",
      "})",
      "export class AppModule { };"
    ]
  }
}
